import React, { useState, useRef, useEffect } from "react";
import { MessageCircle, Send, X, Sparkles, Calendar, Clock, CheckCircle, XCircle } from "lucide-react";
import api from "@/lib/axious";
import { toast } from "sonner";

const GeminiChat = ({ handleTaskChange }) => {
    const [open, setOpen] = useState(false);
    const [input, setInput] = useState("");
    const [messages, setMessages] = useState([]);
    const [loading, setLoading] = useState(false);
    const [pendingTask, setPendingTask] = useState(null);
    const [showConfirmation, setShowConfirmation] = useState(false);
    const messagesEndRef = useRef(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Function ƒë·ªÉ parse task t·ª´ AI response
    const parseTaskFromAI = (text) => {
        // T√¨m pattern ƒë·ªÉ extract task info
        const titleMatch = text.match(/Ti√™u ƒë·ªÅ[:\s]+(.+?)(?:\n|$)/i);
        const categoryMatch = text.match(/Danh m·ª•c[:\s]+(work|personal|study)/i);
        const startDateMatch = text.match(/Ng√†y b·∫Øt ƒë·∫ßu[:\s]+(\d{4}-\d{2}-\d{2})/i);
        const endDateMatch = text.match(/Ng√†y k·∫øt th√∫c[:\s]+(\d{4}-\d{2}-\d{2})/i);
        const startTimeMatch = text.match(/Th·ªùi gian b·∫Øt ƒë·∫ßu[:\s]+(\d{2}:\d{2})/i);
        const endTimeMatch = text.match(/Th·ªùi gian k·∫øt th√∫c[:\s]+(\d{2}:\d{2})/i);
        
        if (titleMatch) {
            const startDate = startDateMatch ? startDateMatch[1] : new Date().toISOString().split('T')[0];
            const endDate = endDateMatch ? endDateMatch[1] : startDate;
            const startTime = startTimeMatch ? startTimeMatch[1] : '09:00';
            const endTime = endTimeMatch ? endTimeMatch[1] : '17:00';
            
            // T·∫°o datetime v·ªõi th·ªùi gian
            const startDateTime = new Date(`${startDate}T${startTime}:00`);
            const endDateTime = new Date(`${endDate}T${endTime}:00`);
            
            return {
                title: titleMatch[1].trim(),
                category: categoryMatch ? categoryMatch[1] : 'personal',
                startDate: startDateTime.toISOString(),
                endDate: endDateTime.toISOString()
            };
        }
        return null;
    };

    // Function ƒë·ªÉ t·∫°o task confirmation dialog
    const createTaskConfirmation = (taskData) => {
        setPendingTask(taskData);
        setShowConfirmation(true);
    };

    // Function ƒë·ªÉ x√°c nh·∫≠n t·∫°o task
    const confirmCreateTask = async () => {
        if (!pendingTask) return;
        
        try {
            await api.post("/tasks", pendingTask);
            toast.success(`ƒê√£ t·∫°o nhi·ªám v·ª• "${pendingTask.title}" th√†nh c√¥ng!`);
            handleTaskChange();
            setShowConfirmation(false);
            setPendingTask(null);
            
            // Th√™m message x√°c nh·∫≠n
            setMessages((prev) => [...prev, { 
                role: "gemini", 
                text: `‚úÖ ƒê√£ t·∫°o nhi·ªám v·ª• "${pendingTask.title}" th√†nh c√¥ng!\n\nüìÖ Ng√†y b·∫Øt ƒë·∫ßu: ${new Date(pendingTask.startDate).toLocaleDateString()} l√∫c ${new Date(pendingTask.startDate).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false })}\nüìÖ Ng√†y k·∫øt th√∫c: ${new Date(pendingTask.endDate).toLocaleDateString()} l√∫c ${new Date(pendingTask.endDate).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false })}\nüè∑Ô∏è Danh m·ª•c: ${pendingTask.category}\n\nB·∫°n c√≥ c·∫ßn t√¥i gi√∫p g√¨ th√™m kh√¥ng?` 
            }]);
        } catch (error) {
            console.error("Error creating task:", error);
            toast.error("L·ªói khi t·∫°o nhi·ªám v·ª•");
        }
    };

    // Function ƒë·ªÉ h·ªßy t·∫°o task
    const cancelCreateTask = () => {
        setShowConfirmation(false);
        setPendingTask(null);
        setMessages((prev) => [...prev, { 
            role: "gemini", 
            text: "ƒê√£ h·ªßy t·∫°o nhi·ªám v·ª•. B·∫°n c√≥ c·∫ßn t√¥i gi√∫p g√¨ kh√°c kh√¥ng?" 
        }]);
    };

    const handleSend = async () => {
        if (!input.trim()) return;
        setMessages((prev) => [...prev, { role: "user", text: input }]);
        setInput("");
        setLoading(true);
        
        try {
            // T·∫°o prompt chuy√™n nghi·ªáp cho AI tr·ª£ l√Ω l√™n l·ªãch
            const systemPrompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp v·ªÅ l√™n l·ªãch v√† qu·∫£n l√Ω th·ªùi gian. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:

1. Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v·ªÅ vi·ªác t·∫°o l·ªãch tr√¨nh
2. ƒê·ªÅ xu·∫•t c√°c nhi·ªám v·ª• c·ª• th·ªÉ v·ªõi th√¥ng tin chi ti·∫øt bao g·ªìm c·∫£ th·ªùi gian
3. Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o task, h√£y tr·∫£ v·ªÅ theo format sau:
   Ti√™u ƒë·ªÅ: [T√™n nhi·ªám v·ª•]
   Danh m·ª•c: [work/personal/study]
   Ng√†y b·∫Øt ƒë·∫ßu: [YYYY-MM-DD]
   Th·ªùi gian b·∫Øt ƒë·∫ßu: [HH:MM] (t·ª´ 00:00 ƒë·∫øn 23:59)
   Ng√†y k·∫øt th√∫c: [YYYY-MM-DD]
   Th·ªùi gian k·∫øt th√∫c: [HH:MM] (t·ª´ 00:00 ƒë·∫øn 23:59)

4. N·∫øu ch·ªâ c√≥ 1 ng√†y, h√£y ƒë·∫∑t ng√†y b·∫Øt ƒë·∫ßu = ng√†y k·∫øt th√∫c
5. Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu
6. N·∫øu kh√¥ng ph·∫£i y√™u c·∫ßu t·∫°o task, h√£y tr·∫£ l·ªùi nh∆∞ m·ªôt tr·ª£ l√Ω l√™n l·ªãch chuy√™n nghi·ªáp
7. Lu√¥n h·ªèi x√°c nh·∫≠n tr∆∞·ªõc khi t·∫°o task m·ªõi

Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: ${input}`;

            const res = await api.post("/tasks/gemini", { prompt: systemPrompt });
            const geminiText = res.data?.candidates?.[0]?.content?.parts?.[0]?.text || "Kh√¥ng c√≥ ph·∫£n h·ªìi";
            
            // Ki·ªÉm tra xem AI c√≥ ƒë·ªÅ xu·∫•t t·∫°o task kh√¥ng
            const taskData = parseTaskFromAI(geminiText);
            if (taskData) {
                setMessages((prev) => [...prev, { role: "gemini", text: geminiText }]);
                createTaskConfirmation(taskData);
            } else {
                setMessages((prev) => [...prev, { role: "gemini", text: geminiText }]);
            }
        } catch (err) {
            console.error("Gemini API error:", err);
            setMessages((prev) => [
                ...prev,
                { role: "gemini", text: "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau." },
            ]);
        }
        setLoading(false);
    };

    return (
        <div>
            {/* Floating chat button v·ªõi hi·ªáu ·ª©ng gradient */}
            <button
                onClick={() => setOpen((o) => !o)}
                className="fixed bottom-8 right-15 z-50 group"
                aria-label="Open chat"
            >
                <div className="relative">
                    {/* Animated gradient background */}
                    <div className="absolute inset-0 bg-gradient-to-r from-violet-600 via-purple-600 to-indigo-600 rounded-full blur-lg opacity-75 group-hover:opacity-100 transition-opacity animate-pulse"></div>
                    {/* Button */}
                    <div className="relative bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 text-white rounded-full p-4 shadow-2xl transition-all duration-300 group-hover:scale-110">
                        <MessageCircle size={28} className="drop-shadow-lg" />
                    </div>
                </div>
            </button>

            {/* Chat window v·ªõi backdrop blur */}
            {open && (
                <>
                    {/* Backdrop */}
                    <div
                        className="fixed inset-0 bg-black/20 backdrop-blur-sm z-40 md:hidden"
                        onClick={() => setOpen(false)}
                    ></div>

                    {/* Chat container */}
                    <div className="fixed bottom-32 right-8 z-50 w-[430px] h-[500px] flex flex-col rounded-3xl overflow-hidden shadow-2xl border border-violet-200/50 bg-white/95 backdrop-blur-xl">
                        {/* Header v·ªõi gradient */}
                        <div className="relative bg-gradient-to-r from-violet-600 via-purple-600 to-indigo-600 p-5 flex items-center justify-between">
                            <div className="flex items-center gap-3">
                                <div className="bg-white/20 backdrop-blur-sm p-2 rounded-xl">
                                    <Sparkles size={24} className="text-white" />
                                </div>
                                <div>
                                    <h3 className="text-white font-bold text-lg">AI Scheduler</h3>
                                    <p className="text-violet-100 text-xs">Tr·ª£ l√Ω l√™n l·ªãch chuy√™n nghi·ªáp</p>
                                </div>
                            </div>
                            <button
                                onClick={() => setOpen(false)}
                                className="text-white/80 hover:text-white hover:bg-white/20 p-2 rounded-xl transition-all duration-200"
                                aria-label="Close chat"
                            >
                                <X size={29} />
                            </button>
                            {/* Decorative gradient orb */}
                            <div className="absolute -right-8 -top-8 w-32 h-32 bg-white/10 rounded-full blur-3xl pointer-events-none"></div>
                        </div>

                        {/* Messages area */}
                        <div className="flex-1 overflow-y-auto p-5 space-y-4 bg-gradient-to-b from-violet-50/30 to-white">
                            {messages.length === 0 && (
                                <div className="h-full flex flex-col items-center justify-center text-center px-6">
                                    <div className="bg-gradient-to-br from-violet-100 to-purple-100 p-6 rounded-3xl mb-4 shadow-lg">
                                        <Sparkles size={48} className="text-violet-600 mx-auto" />
                                    </div>
                                    <h4 className="text-xl font-bold text-gray-800 mb-2">Xin ch√†o! üëã</h4>
                                    <p className="text-gray-600 text-sm leading-relaxed">
                                        T√¥i l√† AI Scheduler - tr·ª£ l√Ω l√™n l·ªãch chuy√™n nghi·ªáp c·ªßa b·∫°n!<br/>
                                        T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:<br/>
                                        üìÖ T·∫°o v√† s·∫Øp x·∫øp l·ªãch tr√¨nh<br/>
                                        ‚è∞ Qu·∫£n l√Ω th·ªùi gian hi·ªáu qu·∫£<br/>
                                        üéØ ƒê·ªÅ xu·∫•t nhi·ªám v·ª• ph√π h·ª£p<br/>
                                        üí° T∆∞ v·∫•n v·ªÅ qu·∫£n l√Ω c√¥ng vi·ªác
                                    </p>
                                </div>
                            )}

                            {messages.map((msg, idx) => (
                                <div
                                    key={idx}
                                    className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"} animate-fadeIn`}
                                >
                                    <div className={`max-w-[85%] ${msg.role === "user" ? "order-2" : "order-1"}`}>
                                        <div
                                            className={`px-4 py-3 rounded-2xl shadow-sm ${msg.role === "user"
                                                    ? "bg-gradient-to-r from-violet-600 to-purple-600 text-white rounded-br-md"
                                                    : "bg-white text-gray-800 rounded-bl-md border border-violet-100"
                                                }`}
                                        >
                                            <p className="text-[15px] leading-relaxed whitespace-pre-wrap break-words">
                                                {msg.text}
                                            </p>
                                        </div>
                                        <div className={`text-xs mt-1 px-2 ${msg.role === "user" ? "text-right text-gray-500" : "text-left text-gray-400"}`}>
                                            {msg.role === "user" ? "B·∫°n" : "Gemini AI"}
                                        </div>
                                    </div>
                                </div>
                            ))}

                            {loading && (
                                <div className="flex justify-start animate-fadeIn">
                                    <div className="bg-white border border-violet-100 px-4 py-3 rounded-2xl rounded-bl-md shadow-sm">
                                        <div className="flex items-center gap-2">
                                            <div className="flex gap-1">
                                                <span className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" style={{ animationDelay: "0ms" }}></span>
                                                <span className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" style={{ animationDelay: "150ms" }}></span>
                                                <span className="w-2 h-2 bg-violet-400 rounded-full animate-bounce" style={{ animationDelay: "300ms" }}></span>
                                            </div>
                                            <span className="text-sm text-violet-600">ƒêang suy nghƒ©...</span>
                                        </div>
                                    </div>
                                </div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>

                        {/* Confirmation Dialog */}
                        {showConfirmation && pendingTask && (
                            <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
                                <div className="bg-white rounded-2xl p-6 mx-4 max-w-md w-full shadow-2xl border border-violet-200">
                                    <div className="flex items-center gap-3 mb-4">
                                        <div className="bg-violet-100 p-2 rounded-xl">
                                            <Calendar className="text-violet-600" size={24} />
                                        </div>
                                        <h3 className="text-lg font-bold text-gray-800">X√°c nh·∫≠n t·∫°o nhi·ªám v·ª•</h3>
                                    </div>
                                    
                                    <div className="space-y-3 mb-6">
                                        <div className="flex items-center gap-2">
                                            <span className="font-medium text-gray-700">üìù Ti√™u ƒë·ªÅ:</span>
                                            <span className="text-gray-900">{pendingTask.title}</span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <span className="font-medium text-gray-700">üè∑Ô∏è Danh m·ª•c:</span>
                                            <span className="px-2 py-1 bg-violet-100 text-violet-700 rounded-full text-sm">
                                                {pendingTask.category}
                                            </span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <span className="font-medium text-gray-700">üìÖ B·∫Øt ƒë·∫ßu:</span>
                                            <span className="text-gray-900">
                                                {new Date(pendingTask.startDate).toLocaleDateString()} l√∫c {new Date(pendingTask.startDate).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false })}
                                            </span>
                                        </div>
                                        <div className="flex items-center gap-2">
                                            <span className="font-medium text-gray-700">üìÖ K·∫øt th√∫c:</span>
                                            <span className="text-gray-900">
                                                {new Date(pendingTask.endDate).toLocaleDateString()} l√∫c {new Date(pendingTask.endDate).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false })}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div className="flex gap-3">
                                        <button
                                            onClick={cancelCreateTask}
                                            className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl transition-colors"
                                        >
                                            <XCircle size={20} />
                                            H·ªßy
                                        </button>
                                        <button
                                            onClick={confirmCreateTask}
                                            className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 text-white rounded-xl transition-all"
                                        >
                                            <CheckCircle size={20} />
                                            T·∫°o nhi·ªám v·ª•
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Input area */}
                        <div className="p-4 bg-white border-t border-violet-100">
                            <div className="flex gap-2 bg-gray-50 rounded-2xl p-2 border border-violet-200/50 focus-within:border-violet-400 focus-within:shadow-lg focus-within:shadow-violet-200/50 transition-all duration-200">
                                <input
                                    type="text"
                                    className="flex-1 bg-transparent px-3 py-2 text-[15px] focus:outline-none text-gray-800 placeholder-gray-400"
                                    value={input}
                                    onChange={(e) => setInput(e.target.value)}
                                    onKeyDown={(e) => e.key === "Enter" && !e.shiftKey && handleSend()}
                                    placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..."
                                    disabled={loading}
                                />
                                <button
                                    onClick={handleSend}
                                    disabled={loading || !input.trim()}
                                    className="bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 disabled:from-gray-300 disabled:to-gray-400 text-white p-3 rounded-xl transition-all duration-200 hover:scale-105 active:scale-95 disabled:hover:scale-100 shadow-lg disabled:shadow-none"
                                    aria-label="Send message"
                                >
                                    <Send size={20} />
                                </button>
                            </div>
                        </div>
                    </div>
                </>
            )}

            <style>{`
        @keyframes fadeIn {
          from {
            opacity: 0;
            transform: translateY(10px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        .animate-fadeIn {
          animation: fadeIn 0.3s ease-out;
        }
      `}</style>
        </div>
    );
};

export default GeminiChat;